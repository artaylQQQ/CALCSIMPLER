---
const { schema } = Astro.props;
const inputNames = (schema.inputs || []).map(i => i.name);
const hasFAQ = Array.isArray(schema.faqs) && schema.faqs.length > 0;
const related = Array.isArray(schema.related) ? schema.related.slice(0,8) : [];
const title = schema.title || 'Calculator';
const description = schema.intro || 'Online calculator.';
const appId = schema.slug || 'calculator';
const SITE = Astro.site ? Astro.site.toString() : 'https://example.com';
const pageUrl = `${SITE}/calculators/${schema.slug}/`;
---

<div class="card" id={`wrap-${appId}`}>
  <h2>{title}</h2>
  <p class="muted">{description}</p>

  <form id={`form-${appId}`}>
    {schema.inputs?.map((i) => (
      <div>
        <label for={`${appId}-${i.name}`}>{i.hint || i.name}</label>
        <input id={`${appId}-${i.name}`} type={i.type || 'number'} step={i.step || 'any'} min={i.min} max={i.max} required />
      </div>
    ))}
    <button id={`${appId}-btn`} type="submit">Calculate</button>
  </form>

  <div class="result" id={`${appId}-result`} aria-live="polite"></div>
  <div class="muted" id={`${appId}-steps`}></div>

  <ins class="adsbygoogle adslot" style="display:block;min-height:90px" data-ad-client={import.meta.env.VITE_ADSENSE_CLIENT} data-ad-slot={import.meta.env.VITE_ADSENSE_SLOTHEADER || ''} data-ad-format="auto" data-full-width-responsive="true"></ins>
</div>

{related.length > 0 && (
  <div class="card">
    <h3>Related calculators</h3>
    <ul>
      {related.map(slug => (<li><a href={`/calculators/${slug}/`}>{slug.replace(/-/g,' ')}</a></li>))}
    </ul>
  </div>
)}

{hasFAQ && (
  <div class="card">
    <h3>FAQ</h3>
    <ul>
      {schema.faqs.map((f) => (<li><strong>{f.q}</strong><br />{f.a}</li>))}
    </ul>
  </div>
)}

<script>
  const names = {JSON.stringify(inputNames)};
  const schemaData = {JSON.stringify(schema)};
  const appId = {JSON.stringify(appId)};

  const getInputs = () => {
    const obj = {};
    for (const n of names) {
      const el = document.getElementById(`${appId}-${n}`);
      const val = el && el.value !== '' ? Number(el.value) : NaN;
      obj[n] = val;
    }
    return obj;
  };

  function sanitizeAndEval(expr, vars) {
    const allowed = new RegExp(`^[0-9+\-*/().,\sA-Za-z_]+$`);
    if (!allowed.test(expr)) return { result: 'Invalid expression', steps: [] };
    let safe = expr;
    for (const k of Object.keys(vars)) {
      if (!Number.isFinite(vars[k])) return { result: 'Please enter valid numbers in all fields.', steps: [] };
      safe = safe.replace(new RegExp(`\\b${k}\\b`, 'g'), String(vars[k]));
    }
    if (!/^[0-9+\-*/().,\s]+$/.test(safe)) return { result: 'Invalid expression', steps: [] };
    try {
      safe = safe.replace(/,/g, '.');
      const result = Function(`"use strict"; return (${safe});`)();
      if (!Number.isFinite(result)) return { result: 'Invalid result', steps: [] };
      return { result, steps: [`Expression: ${expr}`, `Evaluated: ${safe}`] };
    } catch (e) {
      return { result: 'Error', steps: [String(e)] };
    }
  }

  let calcFn;
  (function(){
    if (schemaData.expression){
      calcFn = (inputs) => sanitizeAndEval(schemaData.expression, inputs);
    } else if (schemaData.formula_js){
      calcFn = (new Function('return ' + schemaData.formula_js))();
    } else {
      calcFn = () => ({ result: 'No formula', steps: [] });
    }
  })();

  const formatNum = (x) => Number.isFinite(x) ? new Intl.NumberFormat('en-US', { maximumFractionDigits: 6 }).format(x) : String(x);

  const render = (out) => {
    const resEl = document.getElementById(`${appId}-result`);
    const stepsEl = document.getElementById(`${appId}-steps`);
    resEl.textContent = `Result: ${formatNum(out.result)}`;
    stepsEl.textContent = (out.steps || []).join(' â€¢ ');
    if (window.adsbygoogle) try { (adsbygoogle = window.adsbygoogle || []).push({}); } catch(e){}
  };

  document.getElementById(`form-${appId}`).addEventListener('submit', (e) => {
    e.preventDefault();
    const inputs = getInputs();
    for (const k of Object.keys(inputs)) {
      if (!Number.isFinite(inputs[k])) { render({ result: 'Please enter valid numbers in all fields.', steps: [] }); return; }
    }
    const out = calcFn(inputs);
    render(out);
  });
</script>

<script type="application/ld+json">
{JSON.stringify({
  "@context":"https://schema.org",
  "@type": (schema.schema_org?.includes('SoftwareApplication') ? "SoftwareApplication" : "WebPage"),
  "name": title,
  "applicationCategory": "Calculator",
  "operatingSystem": "Any",
  "url": pageUrl,
  "description": description
})}
</script>

{hasFAQ && (
  <script type="application/ld+json">
    {JSON.stringify({
      "@context":"https://schema.org",
      "@type":"FAQPage",
      "mainEntity": schema.faqs.map(f => ({ "@type":"Question","name":f.q,"acceptedAnswer":{"@type":"Answer","text":f.a}}))
    })}
  </script>
)}
